{"version":3,"sources":["Counter.js","CounterHooks.js","App.js","index.js"],"names":["Counter","props","state","count","initialCount","console","log","ThemeContext","Consumer","style","onClick","changeCount","amount","this","setState","prevState","Component","CounterHooks","useState","setCount","useContext","prevCount","React","createContext","App","theme","setTheme","Provider","value","backgroundColor","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAGqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAOF,EAAMG,cAJE,E,qDAQT,IAAD,OAEP,OADAC,QAAQC,IAAI,kBAEV,kBAACC,EAAaC,SAAd,MACG,SAACC,GAAD,OACC,6BACE,4BAAQA,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,aAAa,KAAvD,KAGA,8BAAO,EAAKT,MAAMC,OAClB,4BAAQM,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,YAAY,KAAtD,W,kCASEC,GACVC,KAAKC,UAAS,SAACC,GACb,MAAO,CAAEZ,MAAOY,EAAUZ,MAAQS,U,GA9BHI,aCAtB,SAASC,EAAT,GAAyC,IAAjBb,EAAgB,EAAhBA,aAAgB,EAC3Bc,mBAASd,GADkB,mBAC9CD,EAD8C,KACvCgB,EADuC,KAE/CV,EAAQW,qBAAWb,GACzB,OACE,6BACE,4BACEE,MAAOA,EACPC,QAAS,kBAAMS,GAAS,SAACE,GAAD,OAAeA,EAAY,OAFrD,KAMA,8BAAOlB,GACP,4BACEM,MAAOA,EACPC,QAAS,kBAAMS,GAAS,SAACE,GAAD,OAAeA,EAAY,OAFrD,MCXC,IAAMd,EAAee,IAAMC,gBAsBnBC,MArBf,WAAgB,IAAD,EACaN,mBAAS,OADtB,mBACNO,EADM,KACCC,EADD,KAEb,OACE,kBAACnB,EAAaoB,SAAd,CAAuBC,MAAO,CAAEC,gBAAiBJ,IAAjD,UAEE,kBAAC,EAAD,CAASrB,aAAc,IAFzB,eAIE,kBAACa,EAAD,CAAcb,aAAc,IAC5B,4BACEM,QAAS,kBACPgB,GAAS,SAACI,GACR,MAAgB,QAATA,EAAiB,OAAS,WAHvC,kBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.527b7e7d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ThemeContext } from './App';\n\nexport default class Counter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: props.initialCount,\n    };\n  }\n\n  render() {\n    console.log('Render Counter');\n    return (\n      <ThemeContext.Consumer>\n        {(style) => (\n          <div>\n            <button style={style} onClick={() => this.changeCount(-1)}>\n              -\n            </button>\n            <span>{this.state.count}</span>\n            <button style={style} onClick={() => this.changeCount(1)}>\n              +\n            </button>\n          </div>\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n\n  changeCount(amount) {\n    this.setState((prevState) => {\n      return { count: prevState.count + amount };\n    });\n  }\n}\n","import React, { useState, useContext } from 'react';\nimport { ThemeContext } from './App';\n\nexport default function CounterHooks({ initialCount }) {\n  const [count, setCount] = useState(initialCount);\n  const style = useContext(ThemeContext);\n  return (\n    <div>\n      <button\n        style={style}\n        onClick={() => setCount((prevCount) => prevCount - 1)}\n      >\n        -\n      </button>\n      <span>{count}</span>\n      <button\n        style={style}\n        onClick={() => setCount((prevCount) => prevCount + 1)}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Counter from './Counter';\nimport CounterHooks from './CounterHooks';\n\nexport const ThemeContext = React.createContext();\nfunction App() {\n  const [theme, setTheme] = useState('red');\n  return (\n    <ThemeContext.Provider value={{ backgroundColor: theme }}>\n      Counter\n      <Counter initialCount={0} />\n      CounterHooks\n      <CounterHooks initialCount={5} />\n      <button\n        onClick={() =>\n          setTheme((prev) => {\n            return prev === 'red' ? 'blue' : 'red';\n          })\n        }\n      >\n        Toggle Theme\n      </button>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}